% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-string.R
\name{replaceStringChars}
\alias{replaceStringChars}
\alias{strrepl}
\title{Replace or remove characters in a string}
\usage{
replaceStringChars(
  string = character(1L),
  indices = integer(),
  replacement = character()
)

strrepl(string = character(1L), indices = integer(), replacement = character())
}
\arguments{
\item{string}{\verb{[character(1)]}

A character string to be modified.}

\item{indices}{\verb{[integer()]}

Indices of individual characters to be removed and/or modified. Length
of \code{indices} cannot be greater than the number of characters found in
\code{string}.

Beware of indices that make no sense (like out-of-bounds indices), as
their individual values are not checked before being used. They could
lead to undefined behavior.}

\item{replacement}{\verb{[character()]}

Optional strings \verb{[character(1)]} that should replace individual characters
of \code{string}. They can be of any length, even \code{0}. An empty string implies
that the underlying character should be removed from \code{string}.

Length of \code{replacement} cannot be greater than length of \code{indices}.
However, it can be shorter. If so, elements will be recycled in the
usual way.}
}
\value{
A \code{character(1)}: either \code{string} or a sub-string created from it.
}
\description{
Replace or remove characters at fixed positions in a string.
}
\details{
This function can be considered as a generalized version of
\link[base:substr]{substr<-()} and \link[base:substr]{substring<-()}.
It is much more predictable, and is fast enough to replace them in most
situations. It does not support regular expressions. If you need to use
them, consider using \link[base:grep]{sub()} or \link[base:grep]{gsub()}
instead.

Function \code{\link[=strrepl]{strrepl()}} is an alias to its semantic counterpart
\code{\link[=replaceStringChars]{replaceStringChars()}}. It fits package \pkg{base}'s naming conventions
for functions that operate with and on strings.
}
\examples{
## Passing nothing to replaceStringChars() is allowed.
identical(replaceStringChars("string"), "string") # TRUE
identical(replaceStringChars(""), "") # TRUE

## Remove characters.
identical(replaceStringChars("string", 1L), "tring") # TRUE
identical(replaceStringChars("string", c(1L, 2L)), "ring") # TRUE
identical(replaceStringChars("string", c(1L, 2L), c("", "")), "ring") # TRUE

## Replace characters.
identical(replaceStringChars("string", c(1L, 2L), c("S", "T")), "STring") # TRUE
identical(replaceStringChars("string", c(1L, 2L), c("S", "")), "Sring") # TRUE
identical(replaceStringChars("string", c(1L, 2L), c("sub", "St")), "subString") # TRUE

## Replace and remove at once.
identical(replaceStringChars("string", c(1L, 2L), c("S", "")), "Sring") # TRUE

## Using semantic names or aliases does not matter.
identical(replaceStringChars("a", 1L), strrepl("a", 1L))

## Remember to store the resulting sub-string. It is NOT modified in place.
string <- "test"
identical(replaceStringChars(string, c(2L, 3L)), "tt") # TRUE
identical(string, "tt") # FALSE

}
